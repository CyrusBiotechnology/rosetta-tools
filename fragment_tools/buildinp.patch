--- sparks-x/bin/buildinp.py	2011-09-16 12:25:22.000000000 -0400
+++ buildinp.py	2023-09-27 16:32:57.495537818 -0400
@@ -6,7 +6,7 @@
 		170, 185, 160, 145, 180, 225, 115, 140, 155, 255, 230)
 def rdphipsi(fn):
 	seq1, ssec1, phipsi1, Fphipsi = [], [], [], []
-	for line in file(fn):
+	for line in open(fn):
 		if line[0] in ">#": continue
 		ss = line.split()
 		if ss[1] == 'X': continue
@@ -29,47 +29,47 @@
 #	for rn1 in "ARNDCQEGHILKMFPSTWYV":
 #		rid = aaDefine(rn1, 1) ires_blast.append(rid)
 	Fseq, Pseq = [], []
-	for line in file(fn):
+	for line in open(fn):
 		ss = line.split()
 		if len(ss)<1 or not ss[0].isdigit(): continue
 		if ss[1] == 'X': continue
 		nr = len(Fseq)
 		if ss[1] != seq1[nr]:
 			if aaDefine(ss[1]) != aaDefine(seq1[nr]):  # in case of special AA
-				print >>sys.stderr, "mismatch of file: ", fn
-				print >>sys.stderr, line, nr, ''.join(seq1)
+				print( "mismatch of file: ", fn, file=sys.stderr)
+				print( line, nr, ''.join(seq1), file=sys.stderr)
 				return -1
 		F1 = [0]*20; P1 = [0]*20
-		for i in xrange(20):
+		for i in range(20):
 			i1 = ires_blast[i]
 			F1[i1] = -int(ss[2+i])
 			P1[i1] = ss[22+i]
 		Fseq.append(F1)
 		Pseq.append(P1)
 	if len(Fseq) != len(seq1):
-		print >>sys.stderr, "diff nres in phipsi1/pssm:", fn, len(Fseq), len(seq1)
+		print( "diff nres in phipsi1/pssm:", fn, len(Fseq), len(seq1), file=sys.stderr)
 	return Fseq, Pseq
 def prtinp(fn, bDSSP=False):
 	fp = open(fn, 'w')
-	print >>fp, len(seq1), version
-	print >>fp, ''.join(seq1)
-	for m in xrange(20):
-		for dat in Fseq: print >>fp, dat[m],
-		print >>fp
-	for m in xrange(20):
-		for dat in Pseq: print >>fp, dat[m],
-		print >>fp
-	print >>fp, ''.join(ssec1)
-	for m in xrange(3):
-		for dat in phipsi1: print >>fp, dat[m],
-		print >>fp
-	for m in xrange(3):
-		print >>fp, ''.join([str(dat[m]) for dat in Fphipsi])
+	print( len(seq1), version, file=fp )
+	print( ''.join(seq1), file=fp )
+	for m in range(20):
+		for dat in Fseq: print( dat[m], file=fp )
+		print( "", file=fp )
+	for m in range(20):
+		for dat in Pseq: print( dat[m], file=fp )
+		print( "", file=fp )
+	print( ''.join(ssec1), file=fp )
+	for m in range(3):
+		for dat in phipsi1: print( dat[m], file=fp )
+		print( "", file=fp )
+	for m in range(3):
+		print( ''.join([str(dat[m]) for dat in Fphipsi]), file=fp )
 	if bDSSP:
 		if seq0 == seq1:
-			ialign1 = [i for i in xrange(len(seq1))]
+			ialign1 = [i for i in range(len(seq1))]
 		elif len(seq0) < min(20, len(seq1)/2):
-			print >>sys.stderr, 'too few res in DSSP in %s: %d %d' %(os.path.basename(fprotein), len(seq0), len(seq1))
+			print( 'too few res in DSSP in %s: %d %d' %(os.path.basename(fprotein), len(seq0), len(seq1)), file=sys.stderr)
 			fp.close(); return
 		else:
 			ialign2 = align_simple(''.join(seq0), ''.join(seq1))
@@ -81,20 +81,20 @@
 				elif ss[0]>=0: i0 += 1
 				elif ss[1]>=0: i1 += 1
 				else:
-					print >>sys.stderr, 'wrong ialign', fprotein, ialign2
+					print( 'wrong ialign', fprotein, ialign2, file=sys.stderr)
 					sys.exit()
-#		print >>fp, ''.join(ssec0)
-		for i in xrange(len(seq1)):
+#		print( ''.join(ssec0), file=fp )
+		for i in range(len(seq1)):
 			i1 = ialign1[i]
 			if i1 >= 0: fp.write(ssec0[i1])
 			else: fp.write('-')
 		fp.write('\n')
-		for m in xrange(3):
-			for i in xrange(len(seq1)):
+		for m in range(3):
+			for i in range(len(seq1)):
 				i1 = ialign1[i]
-				if i1 >= 0: print >>fp, phipsi0[i1][m],
-				else: print >>fp, 0,
-			print >>fp
+				if i1 >= 0: print( phipsi0[i1][m], file=fp )
+				else: print( 0, file=fp )
+			print( "", file=fp )
 	fp.close()
 def do_align2(seq0, seq1):
 	import numpy
@@ -102,12 +102,12 @@
 	n0 = len(seq0); n1 = len(seq1)
 	score = numpy.zeros((n0+1, n1+1))
 	idir = numpy.zeros((n0+1, n1+1), dtype=int)
-	for i in xrange(1, n0+1):
+	for i in range(1, n0+1):
 		idir[i][0] = 1; score[i][0] = -(g0 + (i-1)*g1)
-	for j in xrange(1, n1+1):
+	for j in range(1, n1+1):
 		idir[0][j] = 2; score[0][j] = -(g0 + (j-1)*g1)
-	for i in xrange(1, n0+1):
-		for j in xrange(1, n1+1):
+	for i in range(1, n0+1):
+		for j in range(1, n1+1):
 			if idir[i-1][j] == 1: s1 = score[i-1][j] - g1
 			else: s1 = score[i-1][j] - g0
 			if idir[i][j-1] == 2: s2 = score[i][j-1] - g1
@@ -132,7 +132,7 @@
 		elif it == 2:
 			j -= 1; ik = -1
 		else:
-			print >>sys.stderr, 'wrong dir', idir
+			print( 'wrong dir', idir, file=sys.stderr)
 			sys.exit()
 		ialign2.append( (ik,jk) )
 	ialign2.reverse()
@@ -161,22 +161,22 @@
 		elif j<0: nerr[1] += 1
 		elif seq0[i] != seq1[j]: nerr[2] += 1
 	if sum(nerr) == 0:
-		print >>sys.stderr, 'no error', os.path.basename(fprotein)
+		print( 'no error', os.path.basename(fprotein), file=sys.stderr)
 		return ialign2
 #
-	print >>sys.stderr, 'warning, missing align(DSSP/PSSM/ERR) in %s: %d %d %d' % (os.path.basename(fprotein), nerr[0], nerr[1], nerr[2])
+	print( 'warning, missing align(DSSP/PSSM/ERR) in %s: %d %d %d' % (os.path.basename(fprotein), nerr[0], nerr[1], nerr[2]), file=sys.stderr)
 	for ss in ialign2:
 		if ss[0] >= 0: sys.stderr.write(seq0[ss[0]])
 		else: sys.stderr.write('-')
-	print >>sys.stderr
+	print( "", file=sys.stderr )
 	for ss in ialign2:
 		if ss[1] >= 0: sys.stderr.write(seq1[ss[1]])
 		else: sys.stderr.write('-')
-	print >>sys.stderr
+	print( "", file=sys.stderr )
 	return ialign2
 def rdDSSP(fdssp):
 	seq0, ssec0, phipsi0 = [], [], []
-	fp = file(fdssp)
+	fp = open(fdssp)
 	for line in fp:
 		if line.startswith('  #  RESIDUE AA STRUCTURE'): break
 	for line in fp:
@@ -189,7 +189,7 @@
 		elif ss1 in 'HGI': ss1 = 'H'
 		elif ss1 in 'EBb': ss1 = 'E'
 		else:
-			print >>sys.stderr, 'not known ssec1 in DSSP: ', line
+			print( 'not known ssec1 in DSSP: ', line, file=sys.stderr)
 			sys.exit()
 		ssec0.append(ss1)
 		asa = float(line[35:38])
@@ -204,20 +204,20 @@
 #
 def rdDSSP2(fdssp):
 	seq0, ssec0, phipsi0 = [], [], []
-	lines = [x.rstrip() for x in file(fdssp).readlines()]
+	lines = [x.rstrip() for x in open(fdssp).readlines()]
 	nr = int(lines[0].split()[1])
 	assert(len(lines[1]) == nr)
 	assert(len(lines[2]) == nr)
 	ss3 = lines[3].split(); ss4 = lines[4].split(); ss5 = lines[5].split()
 	assert(len(ss3) == nr); assert(len(ss4) == nr); assert(len(ss5) == nr)
-	for i in xrange(nr):
+	for i in range(nr):
 		if lines[1][i] in 'X': continue
 		ss1 = lines[2][i]
 		if ss1 in ' CST': ss1 = 'C'
 		elif ss1 in 'HGI': ss1 = 'H'
 		elif ss1 in 'EBb': ss1 = 'E'
 		else:
-			print >>sys.stderr, 'not known ssec1 in DSSP: ', line
+			print( 'not known ssec1 in DSSP: ', line, file=sys.stderr)
 			sys.exit()
 		seq0.append(lines[1][i])
 		ssec0.append( ss1 )
@@ -258,7 +258,7 @@
 			buildinp(fphipsiss, fmat, finp, fdssp)
 	except:
 		import traceback
-		print 'Error in file:', fprotein
+		print ('Error in file:', fprotein)
 		traceback.print_exc()
 if __name__ == '__main__':
 	version = 'v2.0'
@@ -278,7 +278,7 @@
 #	global seq0, ssec0, phipsi0
 	if opts.list != '':
 		plist = []
-		for x in file(opts.list):
+		for x in open(opts.list):
 			if x[0] == '#': continue
 			plist.append( x.split()[0] )
 			args += plist
@@ -287,22 +287,22 @@
 			parser.print_help(); sys.exit()
 		if not os.path.isdir(opts.odir):
 			parser.print_help()
-			print >>sys.stderr, "\nDirectory not exists: %s\n" % opts.odir
+			print( "\nDirectory not exists: %s\n" % opts.odir, file=sys.stderr)
 			sys.exit()
 		random.shuffle(args)
 		for i in args:
 			if not i.endswith('.phipsi') and os.path.isfile(i+'.phipsi'):
 				i += '.phipsi'
 			elif not os.path.isfile(i):
-				print >>sys.stderr, 'file not exists:', i; continue
+				print( 'file not exists:', i; continue, file=sys.stderr)
 			dn, bn = os.path.split(i)
 			if bn.endswith('.phipsi'): bn = bn[:-7]
 			fn = os.path.join(dn, bn)
 			ofile = os.path.join(opts.odir, bn+'.inp')
 			if os.path.isfile(ofile): continue
 			if opts.verbose > 0:
-				print bn
-			print "\r", bn, '\t',
+				print (bn)
+			print( "\r", bn, '\t' )
 			if not opts.useDSSP:
 				run1([fn+'.phipsi', fn+'.pssm', ofile])
 			else:
@@ -311,10 +311,10 @@
 				elif os.path.isfile(fn + '.dssp2'):
 					fdssp = fn + '.dssp2'
 				else:
-					print >>sys.stderr, 'file not exists:', fdssp
+					print( 'file not exists:', fdssp, file=sys.stderr)
 					continue
 				run1([fn+'.phipsi', fn+'.pssm', ofile, fdssp])
 	else:
 		if len(args)!=4 and not (not opts.useDSSP and len(args)==3):
 			parser.print_help(); sys.exit()
