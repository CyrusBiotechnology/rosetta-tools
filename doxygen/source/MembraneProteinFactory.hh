// vi: set ts=2 noet:
//
// (c) Copyright Rosetta Commons Member Institutions.
// (c) This file is part of the Rosetta software suite and is made available under license.
// (c) The Rosetta software is developed by the contributing members of the Rosetta Commons.
// (c) For more information, see http://www.rosettacommons.org. Questions about this can be
// (c) addressed to University of Washington UW TechTransfer, email: license@u.washington.edu.

/// @file 	 MembraneProteinFactory.hh
///
/// @brief 	 MembraneProteinFactory
/// @details The membrane protein factory creates a single pose from various membrane proteins
///			 loaded on the front end and initialized as membrane proteins. This single framework
///			 will then be passed off to the MembraneHub (which coordinates I/O) and sent back to the protocol it was
///			 called from (usually in pose loading)
///
/// @author  Rebecca Alford (rfalford12@gmail.com)


/// @brief Class: Membrane Protein Factory
/// @author Rebecca Alford (rfalford12@gmail.com)
///
/// The membrane protein factory constructs a membrane protein using a pre-defined foldtree
/// topology and virtual residues that define each chain's specific embedding in the membrane.
/// The membrane protein factory will load a properly initialized structure given a correct resouce definition
/// file with all provided per-chain resources. This file can be generated by hand or using the script
/// membrane_desc.py in apps/pilot/ralford.
///
/// Maintains the following invariants:
///   (1) For an n chain pose, will return a pose with n+1 chains (n chains plus a membrane chain)
///   (2) Initializes a correct membrane foldtree topology (initial)
///   (3) Membrane chain is always the n+1 chain
///
///
/// Notes:
///     - This class is not a mover. It will not move the backbone whatsoever (see MembraneRigidInitialMover)
///

#ifndef INCLUDED_core_membrane_MembraneProteinFactory_hh
#define INCLUDED_core_membrane_MembraneProteinFactory_hh

// Unit Headers
#include <core/membrane/MembraneProteinFactory.fwd.hh>

// Project Headers
#include <core/membrane/properties/SpanningTopology.hh>
#include <core/membrane/properties/LipidAccInfo.hh>
#include <core/membrane/util/definitions.hh>
#include <core/membrane/util/Exceptions.hh>

#include <core/membrane/geometry/MembraneResidueFactory.hh>
#include <core/membrane/geometry/EmbeddingFactory.hh>

// Package Headers
#include <core/pose/Pose.hh>
#include <core/import_pose/import_pose.hh>

#include <core/types.hh>

#include <basic/Tracer.hh>

// Utility Headers
#include <utility/vector1.hh>
#include <utility/pointer/ReferenceCount.hh>
#include <utility/tag/Tag.hh>

// C++ Headers
#include <cstdlib>
#include <string>
#include <cmath>
#include <algorithm>

namespace core {
namespace membrane {

    /// @brief Membrane Protein Factory
    /// @details Create a membrane protein given the required resources
    ///           - creates a multichain pose from provided chains (specified by membrane prefix list)
    ///           - adds a membrane residue at the root of the foldtree
    ///           - adds embedding definition residues to each chain
    ///           - adds a jump from each embedding residue to the membrane residue
    ///
    /// @note Precondition: Load required throws no exception (should handle any proliferating errors)
    class MembraneProteinFactory : public utility::pointer::ReferenceCount {
        
    public: // methods
        
        /// @brief   Default Constructor
        /// @details Construct a Membrane Protein Factory
        ///
        /// @return [none]
        MembraneProteinFactory();
        
        /// @brief    Default Destructor
        /// @details
        ///
        /// @note
        ~MembraneProteinFactory();
        
        /// @brief 	 Create Membrane Protein
        /// @details Create a membrne proteins from a series of loaded membrane proteins
        ///
        /// @return  Pose (as starting structure)
        core::pose::PoseOP create_membrane_pose();
        
    private: // methods
        
        /// @brief Register Options
        /// @details Register commandline options and flags relevant to membrane proteins
        /// these include non-major resource options
        ///
        /// @note namespaces in, membrane
        void register_options();
        
        /// @brief      Init from CMD
        /// @details    Initialize parameters relevant to membrane options from the command
        ///             line
        ///
        /// @note requires opts
        void init_from_cmd();
        
        /// @brief Build Pose
        /// @details Create pose containing membrane/embedding residues from multi-
        /// chain input.
        /// @throws EXCN_Resource_Manager, EXCN_Membrane_Bounds
        void build_pose( core::pose::PoseOP pose );
        
        /// @brief Initialize Spanning Topology
        /// @details Initialize spanning topology in the final pose
        void initialize_topology( core::pose::Pose & pose );
        
        /// @brief Initialize Lipds Exposure Data
        /// @details Initialize lipid exposure data in the final pose
        void initialize_lips_exp( core::pose::Pose & pose );
        
        /// @brief Integrate FoldTree into membrane pose
        /// @details Add required jumps between root and embedding residues
        ///
        /// @throws not sure yet - once I write it
        void integrate_foldtree(
                                core::pose::Pose & pose,
                                utility::vector1< std::pair< int, int > > peptide_edges,
                                utility::vector1< std::pair< int, int > > membrane_edges,
                                int root );
        
        /// @brief Load required
        /// @details Load required resources for initializing a membrane protein
        /// should make thngs thread safe (load all at once?)
        ///
        /// @throws EXCN_Resource_Manager (missing reuqired resource)
        void load_required();
                
    private: // data
        
        // Map a list of chains to their corresponding base path
        std::map< core::Size, std::string > chains_map_;
        
        // Option Settings
        std::string prefix_file_;
        bool fullatom_;
        
        // Include Lips data
        bool include_lips_;
        
        // List of 'by chain' resources
        utility::vector1< core::pose::PoseOP > chains_;
        utility::vector1< core::membrane::properties::SpanningTopologyOP > topologies_;
        utility::vector1< core::membrane::util::EmbedConfigInfoOP > embeddings_;
        utility::vector1< core::membrane::properties::LipidAccInfoOP > lipid_acc_;
        
        // Factory instances
        core::membrane::geometry::MembraneResidueFactory mrf_;
    
    }; // class MembraneProteinFactory

} // membrane
} // core

#endif // INCLUDED_core_membrane_MembraneProteinFactory_hh



